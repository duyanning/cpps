[general]
# compile-by用来指定底层编译器。目前支持：gcc, mingw, vc, clang。
# 在配置文件config.txt不存在的情况下，缺省的底层编译器同编译cpps的那个编译器。
compile-by=vc

[gcc]
extra-compile-flags = -Wall

[mingw]
compiler-dir = C:\MinGW\bin
extra-compile-flags = -Wall

# 下面的libs4mingw是我自己创建的一个目录，里面是我用mingw编译生成的一些库

# you can repeat include-dir and lib-dir many times
# Boost
include-dir = F:\libs4mingw\boost\include
lib-dir = F:\libs4mingw\boost\lib
dll-dir = F:\libs4mingw\boost\lib

# FLTK
include-dir = F:\libs4mingw\fltk-1.3.3
lib-dir = F:\libs4mingw\fltk-1.3.3\lib

# mingw dll
dll-dir = C:\MinGW\bin


[vc]

# vc配合vcpkg，不要太爽。
include-dir = F:\vcpkg\installed\x86-windows\include

# Qt还是用官方预编译的吧。因为vcpkg编译Qt实在太慢，更新个别的库，也会导致Qt重新编译。
#include-dir = F:\vcpkg\installed\x86-windows\include\QtCore
#include-dir = F:\vcpkg\installed\x86-windows\include\QtWidgets
#include-dir = F:\vcpkg\installed\x86-windows\include\QtGui
include-dir = C:\Qt\5.15.2\msvc2019\include
include-dir = C:\Qt\5.15.2\msvc2019\include\QtCore
include-dir = C:\Qt\5.15.2\msvc2019\include\QtWidgets
include-dir = C:\Qt\5.15.2\msvc2019\include\QtGui
include-dir = C:\Qt\5.15.2\msvc2019\include\QtNetwork

lib-dir = F:\vcpkg\installed\x86-windows\lib
lib-dir = C:\Qt\5.15.2\msvc2019\lib

dll-dir = F:\vcpkg\installed\x86-windows\bin
dll-dir = C:\Qt\5.15.2\msvc2019\bin

# 把下列这些目录中的头文件视为不会变化的头文件，不要让其出现在.d文件中。相当于gcc的-MMD
system-header-dir = F:\vcpkg\installed
system-header-dir = C:\Qt


# 下面的部分是用vc-config-gen产生的。每次visual studio升级后，这个位置都会变化。
# 如果执行cpps时提醒你'cl' is not recognized as an internal or external command，请更新这里


include-dir = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\ATLMFC\include"
include-dir = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\include"
include-dir = "C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\include\um"
include-dir = "C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\ucrt"
include-dir = "C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\shared"
include-dir = "C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um"
include-dir = "C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\winrt"
include-dir = "C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\cppwinrt"



lib-dir = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\ATLMFC\lib\x86"
lib-dir = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\lib\x86"
lib-dir = "C:\Program Files (x86)\Windows Kits\NETFXSDK\4.8\lib\um\x86"
lib-dir = "C:\Program Files (x86)\Windows Kits\10\lib\10.0.19041.0\ucrt\x86"
lib-dir = "C:\Program Files (x86)\Windows Kits\10\lib\10.0.19041.0\um\x86"



compiler-dir = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\HostX86\x86"


# 只要在cpps对脚本进行build期间，需要执行的命令都算编译器。
# fltk的界面设计生成工具fluid.exe所在目录。
compiler-dir = F:\vcpkg\installed\x86-windows\tools\fltk

# Qt的工具所在位置：moc、uic
#compiler-dir = F:\vcpkg\installed\x86-windows\tools\qt5\bin
compiler-dir = C:\Qt\5.15.2\msvc2019\bin

# 下面的lib的作用相当于vc之Linker > Input > Additional Dependencies里的东西 
linklib = kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib

# 我发现vcpkg在集成至visual studio之后，链接时相当于将vcpkg下的*.lib全都交给链接器，我们也如法炮制。
linklib = F:\vcpkg\installed\x86-windows\lib\*.lib

# 有个叫Qt5Bootstrap.lib，一旦链接进来，会跟qt的其他lib冲突。还是在源码中使用linklib吧
linklib = C:\Qt\5.15.2\msvc2019\lib\*.lib



